name: Linux
on: [ push, pull_request ]
jobs:
  # This job is mainly to make sure Notes will compile with Qt 5 from Ubuntu's repository.
  # So it doesn't make much sense to have different build types other than 'debug' here.
  # The release AppImage is built using aqtinstall instead (the job below this one).
  build-apt:
    name: Build (${{ matrix.build-type }}, apt, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        build-type: [ debug ]
        # NOTE: Ubuntu 18.04 is deprecated and will be removed by GitHub in April, 2023.
        # Source: https://github.com/actions/runner-images/issues/6002#issuecomment-1251883705
        #
        # TODO: Replace 'ubuntu-18.04' by 'ubuntu-20.04' when the time comes.
        os: [ ubuntu-18.04, ubuntu-latest ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install Qt 5 (apt)
        run: |
          sudo apt update
          sudo apt install qtbase5-private-dev qttools5-dev-tools

      - name: Build (${{ matrix.build-type }})
        run: |
          mkdir build
          cd build
          export QT_SELECT=qt5
          qmake -config ${{ matrix.build-type }} ../src/Notes.pro
          make -j$(nproc)

  # Build the AppImage using the official Qt 5 release downloaded by aqtinstall.
  # This is also done for macOS and Windows, just to make sure we use the exact same Qt version across all three OSes.
  #
  # NOTE: This job uses a fixed Qt version (set in the 'qt-version' key below)!
  # So, remember to keep it updated whenever a new Qt version is available on aqtinstall.
  appimage-aqtinstall:
    name: AppImage (${{ matrix.build-type }}, Qt ${{ matrix.qt-version }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # If you want build artifacts with debug symbols, just add 'debug' to the 'build-type' key below.
        build-type: [ release ]
        os: [ ubuntu-18.04 ]
        qt-version: [ 5.15.2 ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Update version
        run: |
          sed -i.bak "/^VERSION *=/ s/$/-g${GITHUB_SHA::7}/" src/Notes.pro

      - name: Setup variables
        id: vars
        run: |
          version=$(grep -m 1 VERSION src/Notes.pro | sed 's/^VERSION *= *//')
          artifact_name="Notes_${version}-x86_64"
          file_name="$artifact_name${{ matrix.build-type == 'debug' && '-debug.' || '.' }}AppImage"
          echo "::set-output name=version::$version"
          echo "::set-output name=artifact_name::$artifact_name"
          echo "::set-output name=file_name::$file_name"

      - name: Install Qt ${{ matrix.qt-version }} (aqtinstall)
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ matrix.qt-version }}
          cache: true

      - name: Build (${{ matrix.build-type }})
        run: |
          mkdir build
          cd build
          qmake -config ${{ matrix.build-type }} ../src/Notes.pro
          make -j$(nproc)

      - name: Strip debug symbols
        if: matrix.build-type == 'release'
        run: strip -s build/notes

      - name: Build AppImage (${{ matrix.build-type }})
        run: |
          cd build
          curl -LO https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage --retry 3 --retry-delay 20
          chmod +x linuxdeployqt*
          install -Dm755 -t Notes/usr/bin notes
          install -Dm755 -t Notes/usr/share/applications ../packaging/linux/common/notes.desktop
          mkdir -p Notes/usr/share/icons/hicolor
          cp -r ../packaging/linux/common/icons/* Notes/usr/share/icons/hicolor
          export VERSION='${{ steps.vars.outputs.version }}'
          ./linuxdeployqt* Notes/usr/share/applications/notes.desktop -appimage -exclude-libs=libqsqlibase,libqsqlodbc,libqsqlpsql,libqsqltds
          mv Notes*.AppImage '${{ steps.vars.outputs.file_name }}'

      - name: Upload AppImage artifact (${{ matrix.build-type }})
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.vars.outputs.artifact_name }}-${{ runner.os }}-Qt${{ matrix.qt-version }}-${{ matrix.build-type }}
          path: build/${{ steps.vars.outputs.file_name }}
